// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tHfoxu6XFvmk837xn6JEtW
// Component: zpoU_12dwW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LargeScoreCard from "../../LargeScoreCard"; // plasmic-import: GVdbGHFfmL/component
import Badge from "../../Badge"; // plasmic-import: WS3v7GNI-7/component

import { ScreenContext, ScreenValue } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: cYH_9Q0rIf-f/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_vercel_analytics.module.css"; // plasmic-import: tHfoxu6XFvmk837xn6JEtW/projectcss
import sty from "./PlasmicMainScore.module.css"; // plasmic-import: zpoU_12dwW/css

export type PlasmicMainScore__VariantMembers = {};
export type PlasmicMainScore__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainScore__VariantsArgs;
export const PlasmicMainScore__VariantProps = new Array<VariantPropType>();

export type PlasmicMainScore__ArgsType = {
  screen?: string;
};

type ArgPropType = keyof PlasmicMainScore__ArgsType;
export const PlasmicMainScore__ArgProps = new Array<ArgPropType>("screen");

export type PlasmicMainScore__OverridesType = {
  root?: p.Flex<"div">;
  largeScoreCard?: p.Flex<typeof LargeScoreCard>;
  box?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  badge?: p.Flex<typeof Badge>;
  h4?: p.Flex<"h4">;
  arrowDown?: p.Flex<"div">;
  arrowRight?: p.Flex<"div">;
};

export interface DefaultMainScoreProps {
  screen?: string;
  className?: string;
}

function PlasmicMainScore__RenderFunc(props: {
  variants: PlasmicMainScore__VariantsArgs;
  args: PlasmicMainScore__ArgsType;
  overrides: PlasmicMainScore__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: React.useContext(ScreenContext)
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <LargeScoreCard
        data-plasmic-name={"largeScoreCard"}
        data-plasmic-override={overrides.largeScoreCard}
        className={classNames("__wab_instance", sty.largeScoreCard)}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box)}
      >
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(defaultcss.h3, defaultcss.__wab_text, sty.h3)}
        >
          {"Real Experience Score"}
        </h3>

        <Badge
          data-plasmic-name={"badge"}
          data-plasmic-override={overrides.badge}
          className={classNames("__wab_instance", sty.badge)}
        >
          {"9,309 Data Points"}
        </Badge>

        <h4
          data-plasmic-name={"h4"}
          data-plasmic-override={overrides.h4}
          className={classNames(defaultcss.h4, defaultcss.__wab_text, sty.h4)}
        >
          {"The combined score of your Web Vitals experienced by your vistors."}
        </h4>
      </p.Stack>

      {(hasVariant(globalVariants, "screen", "tablet") ? false : true) ? (
        <div
          data-plasmic-name={"arrowDown"}
          data-plasmic-override={overrides.arrowDown}
          className={classNames(defaultcss.all, sty.arrowDown)}
        />
      ) : null}
      {(hasVariant(globalVariants, "screen", "tablet") ? true : false) ? (
        <div
          data-plasmic-name={"arrowRight"}
          data-plasmic-override={overrides.arrowRight}
          className={classNames(defaultcss.all, sty.arrowRight)}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "largeScoreCard",
    "box",
    "h3",
    "badge",
    "h4",
    "arrowDown",
    "arrowRight"
  ],

  largeScoreCard: ["largeScoreCard"],
  box: ["box", "h3", "badge", "h4"],
  h3: ["h3"],
  badge: ["badge"],
  h4: ["h4"],
  arrowDown: ["arrowDown"],
  arrowRight: ["arrowRight"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  largeScoreCard: typeof LargeScoreCard;
  box: "div";
  h3: "h3";
  badge: typeof Badge;
  h4: "h4";
  arrowDown: "div";
  arrowRight: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainScore__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainScore__VariantsArgs;
    args?: PlasmicMainScore__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainScore__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMainScore__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMainScore__ArgProps,
      internalVariantPropNames: PlasmicMainScore__VariantProps
    });

    return PlasmicMainScore__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainScore";
  } else {
    func.displayName = `PlasmicMainScore.${nodeName}`;
  }
  return func;
}

export const PlasmicMainScore = Object.assign(
  // Top-level PlasmicMainScore renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    largeScoreCard: makeNodeComponent("largeScoreCard"),
    box: makeNodeComponent("box"),
    h3: makeNodeComponent("h3"),
    badge: makeNodeComponent("badge"),
    h4: makeNodeComponent("h4"),
    arrowDown: makeNodeComponent("arrowDown"),
    arrowRight: makeNodeComponent("arrowRight"),

    // Metadata about props expected for PlasmicMainScore
    internalVariantProps: PlasmicMainScore__VariantProps,
    internalArgProps: PlasmicMainScore__ArgProps
  }
);

export default PlasmicMainScore;
/* prettier-ignore-end */
