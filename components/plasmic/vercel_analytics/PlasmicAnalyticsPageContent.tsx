// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tHfoxu6XFvmk837xn6JEtW
// Component: VR1e9QZukPo
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: GTVCcv3dv5/component
import MainScore from "../../MainScore"; // plasmic-import: zpoU_12dwW/component
import PerfScore from "../../PerfScore"; // plasmic-import: -2zrKBb31E/component
import Separator from "../../Separator"; // plasmic-import: R1EHrPSYL9/component
import LinkButton from "../../LinkButton"; // plasmic-import: 5-PHy2lJJl/component
import NumListItem from "../../NumListItem"; // plasmic-import: O-jfv66HU6/component

import { ScreenContext, ScreenValue } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: cYH_9Q0rIf-f/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_vercel_analytics.module.css"; // plasmic-import: tHfoxu6XFvmk837xn6JEtW/projectcss
import sty from "./PlasmicAnalyticsPageContent.module.css"; // plasmic-import: VR1e9QZukPo/css

import VercelLogoMarkIcon from "./icons/PlasmicIcon__VercelLogoMark"; // plasmic-import: gxwiCw8GUc/icon

export type PlasmicAnalyticsPageContent__VariantMembers = {};
export type PlasmicAnalyticsPageContent__VariantsArgs = {};
type VariantPropType = keyof PlasmicAnalyticsPageContent__VariantsArgs;
export const PlasmicAnalyticsPageContent__VariantProps = new Array<VariantPropType>();

export type PlasmicAnalyticsPageContent__ArgsType = {
  screen?: string;
};

type ArgPropType = keyof PlasmicAnalyticsPageContent__ArgsType;
export const PlasmicAnalyticsPageContent__ArgProps = new Array<ArgPropType>(
  "screen"
);

export type PlasmicAnalyticsPageContent__OverridesType = {
  body?: p.Flex<"div">;
  heroSection?: p.Flex<"div">;
  heroDescription?: p.Flex<"h3">;
  getYourScoreButton?: p.Flex<typeof Button>;
  bigScore?: p.Flex<"img">;
  dashboardSection?: p.Flex<"div">;
  dashboardSectionContent?: p.Flex<"div">;
  dashboardImageContainer?: p.Flex<"div">;
  mobileDashboardImageFrame?: p.Flex<"div">;
  mobileDashboardImage?: p.Flex<"img">;
  desktopDashboard?: p.Flex<"img">;
  scoreSection?: p.Flex<"div">;
  statsLayout?: p.Flex<"div">;
  mainScore?: p.Flex<typeof MainScore>;
  statsSections?: p.Flex<"div">;
  separator?: p.Flex<typeof Separator>;
  deploySection?: p.Flex<"div">;
  enableButton?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  docsLink?: p.Flex<typeof LinkButton>;
  startCardContainer?: p.Flex<"div">;
  startCard?: p.Flex<"img">;
  contactButton?: p.Flex<typeof Button>;
};

export interface DefaultAnalyticsPageContentProps {
  screen?: string;
  className?: string;
}

function PlasmicAnalyticsPageContent__RenderFunc(props: {
  variants: PlasmicAnalyticsPageContent__VariantsArgs;
  args: PlasmicAnalyticsPageContent__ArgsType;
  overrides: PlasmicAnalyticsPageContent__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: React.useContext(ScreenContext)
  });

  return (
    <div
      data-plasmic-name={"body"}
      data-plasmic-override={overrides.body}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.body)}
    >
      <div
        data-plasmic-name={"heroSection"}
        data-plasmic-override={overrides.heroSection}
        className={classNames(defaultcss.all, sty.heroSection)}
      >
        <div className={classNames(defaultcss.all, sty.box__ovyRx)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__mzUr7
            )}
          >
            {"Your True Lighthouse Score!!"}
          </div>

          <h3
            data-plasmic-name={"heroDescription"}
            data-plasmic-override={overrides.heroDescription}
            className={classNames(
              defaultcss.h3,
              defaultcss.__wab_text,
              sty.heroDescription
            )}
          >
            {
              "Vercel Analytics provides your Real Experience Score through data from actual visitors. Adopt a performance focused workflow and leave manual and synthetic tests behind."
            }
          </h3>
        </div>

        <Button
          data-plasmic-name={"getYourScoreButton"}
          data-plasmic-override={overrides.getYourScoreButton}
          className={classNames("__wab_instance", sty.getYourScoreButton)}
        >
          {"Get Your Score"}
        </Button>

        <img
          data-plasmic-name={"bigScore"}
          data-plasmic-override={overrides.bigScore}
          alt={""}
          className={classNames(defaultcss.img, sty.bigScore)}
          role={"img"}
          src={
            hasVariant(globalVariants, "screen", "tablet")
              ? "/plasmic/vercel_analytics/images/desktopScoreAnimation.png"
              : "/plasmic/vercel_analytics/images/mobileScoreAnimation.png"
          }
        />

        <div className={classNames(defaultcss.all, sty.box__wfEe6)} />
      </div>

      <div
        data-plasmic-name={"dashboardSection"}
        data-plasmic-override={overrides.dashboardSection}
        className={classNames(defaultcss.all, sty.dashboardSection)}
      >
        <div
          data-plasmic-name={"dashboardSectionContent"}
          data-plasmic-override={overrides.dashboardSectionContent}
          className={classNames(defaultcss.all, sty.dashboardSectionContent)}
        >
          <div className={classNames(defaultcss.all, sty.box__eUjfA)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__nZi4
              )}
            >
              {hasVariant(globalVariants, "screen", "tablet")
                ? "Performance from the Right Point of View"
                : "Performance from the\nRight Point of View"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__wlm4L
              )}
            >
              {
                "Instead of measuring on your laptop, Vercel Analytics collects web vitals from the actual devices your visitors are using.\nDraw actionable insights by seeing which pages and source code contribute to your score."
              }
            </div>
          </div>

          {(hasVariant(globalVariants, "screen", "tablet") ? true : true) ? (
            <div
              data-plasmic-name={"dashboardImageContainer"}
              data-plasmic-override={overrides.dashboardImageContainer}
              className={classNames(
                defaultcss.all,
                sty.dashboardImageContainer
              )}
            >
              {(
                hasVariant(globalVariants, "screen", "tablet") ? false : true
              ) ? (
                <div
                  data-plasmic-name={"mobileDashboardImageFrame"}
                  data-plasmic-override={overrides.mobileDashboardImageFrame}
                  className={classNames(
                    defaultcss.all,
                    sty.mobileDashboardImageFrame
                  )}
                >
                  {true ? (
                    <img
                      data-plasmic-name={"mobileDashboardImage"}
                      data-plasmic-override={overrides.mobileDashboardImage}
                      alt={""}
                      className={classNames(
                        defaultcss.img,
                        sty.mobileDashboardImage
                      )}
                      role={"img"}
                      src={
                        hasVariant(globalVariants, "screen", "tablet")
                          ? "/plasmic/vercel_analytics/images/dashboard.png"
                          : "/plasmic/vercel_analytics/images/dashboardMobilepng.png"
                      }
                    />
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "tablet") ? true : false
              ) ? (
                <img
                  data-plasmic-name={"desktopDashboard"}
                  data-plasmic-override={overrides.desktopDashboard}
                  alt={""}
                  className={classNames(defaultcss.img, sty.desktopDashboard)}
                  role={"img"}
                  src={"/plasmic/vercel_analytics/images/dashboard.png"}
                />
              ) : null}
            </div>
          ) : null}
        </div>
      </div>

      <div
        data-plasmic-name={"scoreSection"}
        data-plasmic-override={overrides.scoreSection}
        className={classNames(defaultcss.all, sty.scoreSection)}
      >
        <div className={classNames(defaultcss.all, sty.box___4Qbm)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box___49BjH
            )}
          >
            {hasVariant(globalVariants, "screen", "tablet")
              ? "Obtain your Real Experience Score"
              : "Obtain your Real Experience Score!!!!!!!!!!!"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__yZaU1
            )}
          >
            {
              "An emulated test cannot capture these important signals. There’s no substitute for real data."
            }
          </div>

          <div
            data-plasmic-name={"statsLayout"}
            data-plasmic-override={overrides.statsLayout}
            className={classNames(defaultcss.all, sty.statsLayout)}
          >
            <p.Stack
              as={"div"}
              hasGap={
                hasVariant(globalVariants, "screen", "tablet") ? true : false
              }
              className={classNames(defaultcss.all, sty.box__yc29L)}
            >
              <MainScore
                data-plasmic-name={"mainScore"}
                data-plasmic-override={overrides.mainScore}
                className={classNames("__wab_instance", sty.mainScore)}
              />

              <div
                data-plasmic-name={"statsSections"}
                data-plasmic-override={overrides.statsSections}
                className={classNames(defaultcss.all, sty.statsSections)}
              >
                <PerfScore
                  className={classNames("__wab_instance", sty.perfScore__clj3)}
                  description={"When the page's first content is displayed."}
                  metric={"2.4"}
                  title={"First Contentful Paint"}
                  unit={"s"}
                />

                <PerfScore
                  className={classNames("__wab_instance", sty.perfScore__aACM)}
                  description={
                    "When all the page’s content has been displayed."
                  }
                  metric={"3.5"}
                  title={"Largest Contentful Paint"}
                  unit={"s"}
                />

                <PerfScore
                  className={classNames("__wab_instance", sty.perfScore__qxtV)}
                  description={
                    "The page’s time to react to the user’s first interaction."
                  }
                  metric={"40"}
                  title={"First Input Delay"}
                  unit={"ms"}
                />

                <PerfScore
                  className={classNames("__wab_instance", sty.perfScore__eutv4)}
                  description={"How much the page’s elements move when loaded."}
                  metric={"0.1"}
                  title={"Cumulative Layout Shift"}
                  unit={" "}
                />
              </div>
            </p.Stack>
          </div>
        </div>

        <Separator
          data-plasmic-name={"separator"}
          data-plasmic-override={overrides.separator}
          className={classNames("__wab_instance", sty.separator)}
        />
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"deploySection"}
        data-plasmic-override={overrides.deploySection}
        hasGap={true}
        className={classNames(defaultcss.all, sty.deploySection)}
      >
        <p.Stack
          as={"div"}
          hasGap={
            hasVariant(globalVariants, "screen", "desktop") ? true : false
          }
          className={classNames(defaultcss.all, sty.box__eQbQo)}
        >
          <div className={classNames(defaultcss.all, sty.box__fv0KI)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__kjQNv
              )}
            >
              {"Start in Seconds"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__bi82
              )}
            >
              {
                "Start collecting your Real Experience Score on your Vercel deployments. Zero config required."
              }
            </div>

            <p.Stack
              as={"div"}
              hasGap={
                hasVariant(globalVariants, "screen", "tablet") ? true : false
              }
              className={classNames(defaultcss.all, sty.box__mqB8J)}
            >
              <Button
                data-plasmic-name={"enableButton"}
                data-plasmic-override={overrides.enableButton}
                className={classNames("__wab_instance", sty.enableButton)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__lcOYe)}
                >
                  <VercelLogoMarkIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(defaultcss.all, sty.svg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__duKeq
                    )}
                  >
                    {"Enable on Vercel"}
                  </div>
                </p.Stack>
              </Button>

              <LinkButton
                data-plasmic-name={"docsLink"}
                data-plasmic-override={overrides.docsLink}
                className={classNames("__wab_instance", sty.docsLink)}
                href={"https://vercel.com/docs/analytics" as const}
              />
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__wuyYp)}
            >
              <NumListItem
                className={classNames(
                  "__wab_instance",
                  sty.numListItem___5A07U
                )}
                slot={"1"}
              >
                {"Navigate your project in the Vercel dashboard."}
              </NumListItem>

              <NumListItem
                className={classNames(
                  "__wab_instance",
                  sty.numListItem___8MFfb
                )}
                slot={"2"}
              >
                {"Select the Analytics tab and enable."}
              </NumListItem>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"startCardContainer"}
            data-plasmic-override={overrides.startCardContainer}
            className={classNames(defaultcss.all, sty.startCardContainer)}
          >
            <img
              data-plasmic-name={"startCard"}
              data-plasmic-override={overrides.startCard}
              alt={""}
              className={classNames(defaultcss.img, sty.startCard)}
              role={"img"}
              src={"/plasmic/vercel_analytics/images/deployCard.png"}
            />
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__bZRlK)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__kgDk)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__l8Qcm
              )}
            >
              {"Enable for any Next.js or Gatsby app."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__vuRpT
              )}
            >
              {
                "Get in touch with our team to learn how to enable Analytics on any hosting service."
              }
            </div>
          </p.Stack>

          <Button
            data-plasmic-name={"contactButton"}
            data-plasmic-override={overrides.contactButton}
            className={classNames("__wab_instance", sty.contactButton)}
            type={"secondary" as const}
          >
            {"Talk to Us"}
          </Button>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  body: [
    "body",
    "heroSection",
    "heroDescription",
    "getYourScoreButton",
    "bigScore",
    "dashboardSection",
    "dashboardSectionContent",
    "dashboardImageContainer",
    "mobileDashboardImageFrame",
    "mobileDashboardImage",
    "desktopDashboard",
    "scoreSection",
    "statsLayout",
    "mainScore",
    "statsSections",
    "separator",
    "deploySection",
    "enableButton",
    "svg",
    "docsLink",
    "startCardContainer",
    "startCard",
    "contactButton"
  ],

  heroSection: [
    "heroSection",
    "heroDescription",
    "getYourScoreButton",
    "bigScore"
  ],

  heroDescription: ["heroDescription"],
  getYourScoreButton: ["getYourScoreButton"],
  bigScore: ["bigScore"],
  dashboardSection: [
    "dashboardSection",
    "dashboardSectionContent",
    "dashboardImageContainer",
    "mobileDashboardImageFrame",
    "mobileDashboardImage",
    "desktopDashboard"
  ],

  dashboardSectionContent: [
    "dashboardSectionContent",
    "dashboardImageContainer",
    "mobileDashboardImageFrame",
    "mobileDashboardImage",
    "desktopDashboard"
  ],

  dashboardImageContainer: [
    "dashboardImageContainer",
    "mobileDashboardImageFrame",
    "mobileDashboardImage",
    "desktopDashboard"
  ],

  mobileDashboardImageFrame: [
    "mobileDashboardImageFrame",
    "mobileDashboardImage"
  ],

  mobileDashboardImage: ["mobileDashboardImage"],
  desktopDashboard: ["desktopDashboard"],
  scoreSection: [
    "scoreSection",
    "statsLayout",
    "mainScore",
    "statsSections",
    "separator"
  ],

  statsLayout: ["statsLayout", "mainScore", "statsSections"],
  mainScore: ["mainScore"],
  statsSections: ["statsSections"],
  separator: ["separator"],
  deploySection: [
    "deploySection",
    "enableButton",
    "svg",
    "docsLink",
    "startCardContainer",
    "startCard",
    "contactButton"
  ],

  enableButton: ["enableButton", "svg"],
  svg: ["svg"],
  docsLink: ["docsLink"],
  startCardContainer: ["startCardContainer", "startCard"],
  startCard: ["startCard"],
  contactButton: ["contactButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  body: "div";
  heroSection: "div";
  heroDescription: "h3";
  getYourScoreButton: typeof Button;
  bigScore: "img";
  dashboardSection: "div";
  dashboardSectionContent: "div";
  dashboardImageContainer: "div";
  mobileDashboardImageFrame: "div";
  mobileDashboardImage: "img";
  desktopDashboard: "img";
  scoreSection: "div";
  statsLayout: "div";
  mainScore: typeof MainScore;
  statsSections: "div";
  separator: typeof Separator;
  deploySection: "div";
  enableButton: typeof Button;
  svg: "svg";
  docsLink: typeof LinkButton;
  startCardContainer: "div";
  startCard: "img";
  contactButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnalyticsPageContent__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnalyticsPageContent__VariantsArgs;
    args?: PlasmicAnalyticsPageContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnalyticsPageContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAnalyticsPageContent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAnalyticsPageContent__ArgProps,
      internalVariantPropNames: PlasmicAnalyticsPageContent__VariantProps
    });

    return PlasmicAnalyticsPageContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "body") {
    func.displayName = "PlasmicAnalyticsPageContent";
  } else {
    func.displayName = `PlasmicAnalyticsPageContent.${nodeName}`;
  }
  return func;
}

export const PlasmicAnalyticsPageContent = Object.assign(
  // Top-level PlasmicAnalyticsPageContent renders the root element
  makeNodeComponent("body"),
  {
    // Helper components rendering sub-elements
    heroSection: makeNodeComponent("heroSection"),
    heroDescription: makeNodeComponent("heroDescription"),
    getYourScoreButton: makeNodeComponent("getYourScoreButton"),
    bigScore: makeNodeComponent("bigScore"),
    dashboardSection: makeNodeComponent("dashboardSection"),
    dashboardSectionContent: makeNodeComponent("dashboardSectionContent"),
    dashboardImageContainer: makeNodeComponent("dashboardImageContainer"),
    mobileDashboardImageFrame: makeNodeComponent("mobileDashboardImageFrame"),
    mobileDashboardImage: makeNodeComponent("mobileDashboardImage"),
    desktopDashboard: makeNodeComponent("desktopDashboard"),
    scoreSection: makeNodeComponent("scoreSection"),
    statsLayout: makeNodeComponent("statsLayout"),
    mainScore: makeNodeComponent("mainScore"),
    statsSections: makeNodeComponent("statsSections"),
    separator: makeNodeComponent("separator"),
    deploySection: makeNodeComponent("deploySection"),
    enableButton: makeNodeComponent("enableButton"),
    svg: makeNodeComponent("svg"),
    docsLink: makeNodeComponent("docsLink"),
    startCardContainer: makeNodeComponent("startCardContainer"),
    startCard: makeNodeComponent("startCard"),
    contactButton: makeNodeComponent("contactButton"),

    // Metadata about props expected for PlasmicAnalyticsPageContent
    internalVariantProps: PlasmicAnalyticsPageContent__VariantProps,
    internalArgProps: PlasmicAnalyticsPageContent__ArgProps
  }
);

export default PlasmicAnalyticsPageContent;
/* prettier-ignore-end */
